java.lang.package
    Introduction
    Object Class
    String Class
    StringBuilder Class
    Wrapper Classes
    AutoBoxing AutoUnBoxing.
--
Introduction
    For writing any java program whether it is simple or complex the most commonly
    required classes and interfaces are grouped into a separate package which is
    nothing but java.lang.package
    --
    We are not required to import java.lang package explicitly because all classes
    and interfaces present in Lang package by default available to every java
    program
--
What is the java.lang.Object
    The most commonly required method are defined in a separate class which is 
    nothing but Object class for every java class whether it is predefined class or
    customised class.
    
    Every class in java is a child of Object either directly or indirectly so 
    that Object class methods by default available to every java class.

    Hence Object class is considered as root of all java classes.
    If our class doesn't extend any other class, then only our classs is the direct
    child class of Object class.
Example:
    class Employee extends Object {}
--
    If our class extends any other class then our class is indirect child class of 
    Object class.
Example:
    class Department extends Employee {}
==
Object class defines the following 11 methods

public String toString(){};
public native int hashCode();
public boolean equals(Object obj){};
protected native Object clone() throws CloneNotSupportedException{}
public final native Class getClass();

protected void finalize() throws Throwable {}

public final void wait() throws InterruptedExecution {}
public final void wait(long millis, int name) throws InterruptedExecution{}
public final native void wait(long millis) throws InterruptedExecution;

public final native void notify();
public final native void notifyAll();

These are 11 methods present inside the object class

Strictly speaking object class contains 12 methods the extra methods is
registerNative().

private static native void registerNative();

this method internally required for object class and not available to the child 
classes hence we are not required to consider this method
==
public String toString(){};
We can use toString() method to get string representation of an object.
    Employee empObj = new Employee();
    String empStr = empObj.toString();
whenever we are trying to print object reference internally toString() method
will be called.
    System.out.println(empStr);
If our class doesn't contain toString() method then object class toString()
method will be executed.

The Object clas toString method looks like below

public String toString() {
    return getClass().getName() + "@" + Integer.toHexString(hashCode());
}

Based on our requirement we can override toString() method to provide our own
String representation.
Example:
    public String toString() {
	    return "{" + this.firstName + "," + this.lastName + "," + this.phoneNumber 
        + "," + this.email + "}";
	}
--
In all Wrapper classes, in all collection classes, String class, StringBuffer
and StringBuilder class, toString() method is overridden for meaning full
String representation hence it is highly recommended to override toString() 
method in our class also.
==
public native int hashCode();

For every object a unique number generated by JVM which is nothing but hashCode.
hashCode won't represents address of object. It will generates on top of the 
address of object.
JVM will use hashCode while saving objects into hashing related data structures.
Like hash table hash map, hash Set etc.
The main advantage of saving objects based on hashCode() is
search operation will become easy(themost powerfull search algorithm upto 
today is hashing.)

Object class hashCode() method it will generates hash code based on address of 
the object.
It doesn't mean hashCode() represents address of the object.

Based on our requirement we can override hashCode() method in our class. to
generates our own hashCode().

Overriding hash code method is said to br proper if and only if for every
object we have to generate a unique number as hashCode().